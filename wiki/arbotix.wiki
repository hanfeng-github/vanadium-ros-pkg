#summary Package Documentation: arbotix

This is the temporary docs...

= Introduction =
The ArbotiX-ROS driver consists of custom firmware for the ArbotiX RoboController, and an ROS node which interacts over a USB serial connection. The node is designed to be highly modular: a core module interacts with, and holds onto state information about servos, encoders, motors and IO. Individual "controllers" are then loaded to provide ROS topic- or action-based interfaces to these hardware devices.

The ArbotiX firmware provides:
 * Control of up to 252 Dynamixel servos
 * Control of up to 10 hobby (PWM) servos
 * Access to 8 analog channels
 * Control and access of up to 16 digital channels (multiplexed with the hobby servo channels)
 * Full, tunable PID control of 2 motors.
 * IK-based control of walking robots (this requires a special NUKE-based firmware).

Current controllers include:
 * High level control of a differential drive, including components necessary for using the ROS navigation stack, such as publishing odometry and tf information. (arbotix_controllers/base_controller).
 * High level control of IK-based walking robots using NUKE, including odometry and tf (arbotix_controllers/nuke_controller).
 * Action based joint controllers, for arms (arbotix_controllers/joint_traj_action).
 * Action based single joint controller (arbotix_controllers/single_traj_action).
 * Action based head controller (arbotix_controllers/head_action).
 * Low level joint controllers (arbotix_controllers/joint_controller).
 * Low level joint trajectory controllers (arbotix_controllers/joint_traj_controller).
 * The poor man's laser scanner, which broadcasts laser_scan topics using a long range IR sensor and AX-12. (arbotix_sensors/lidar).

= Firmware = 
There are currently several options for firmware. 
 * arbotix-ros - default firmware. 
 * arbotix-ros-nuke - firmware sketch which can be exported from PyPose/NUKE.

Additional options include: mobile base support and/or PML support.

= Core Module = 
The core module is the base of the arbotix node. It publishes the _joint_states_ topic. _arbotix-ros_ offers the following services:
 * getAnalog
 * getDigital 
 * setDigital

Parameters: 
 * port (default: /dev/ttyUSB0)
 * baud (default: 38400)
 * rate (default: 10.0) - rate at which to publish the _joint_states_ topic. 
 * dynamixels ... 
 * servos ...
 * use_sync 

= Base Controllers = 
The base_controller is in command of a mobile base. It subscribes to the _cmd_vel_ topic, and publishes to the _odom_ topic. The nuke_controller is a derivative of the base_controller, which allows strafing for walking platforms. 

Parameters:
 * ticks_meter - encoder ticks per meter of travel
 * base_width - width between differential drive wheels, in meters
 * base_rate (default: 10.0) how often to read encoders and publish odometry. 

= Joint Controllers =
The joint_controller is the simplest of servo controllers. It subscribes to a _cmd_joints_ topic, of type JointState, and manages a set of joints -- often an arm or head unit. Simple positional requests can be sent over this topic, and servos are moved to the desired position (instantly, no smoothing or trajectory management is employed). 

A joint_traj_controller allows more advanced control of a set of servos by passing a series of trajectories, rather than a single position. It subscribes to the _command_ topic within it's namespace. The single_traj_controller is a similar controller, but for single servo control. A joint_traj_action can be used to pass trajectories to a joint_traj_controller via an action interface. 

A head_action allows positioning a head to point at a location in space. It uses our _cmd_joints_ topic.  

= Lidar =
The Poor Man's Lidar (PML) module allows using an AX-12 servo and a long range IR sensor to  create laser scans within ROS. While the resolution and update rate are significantly lower than that of a true lidar, the results are impressive for the overall cost. Use of a PML requires that a proper firmware be installed.  

Parameters: 
 * lidar_rate (default: 1.0) 
 * lidar_frame (default: base_laser)

= YAML Specification =
The _arbotix-ros_ node uses a YAML file to specify it's many parameters and possible configurations. 

= Launch File = 
In order to load the YAML specification, it is recommended to use a launch file like the following: 

= Example: Nelson =
Coming Soon.

= Controller GUI = 
The controller GUI is a quick way to test that everything is working, or even to teleoperate your bot. ...
