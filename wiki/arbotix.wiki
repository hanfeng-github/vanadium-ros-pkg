#summary Package Documentation: arbotix

Most of this has been moved to the ROS wiki -- only those parts still in need of migration/deletion remain. Please see http://www.ros.org/wiki/arbotix

= Firmware = 
The ArbotiX firmware provides access to:
 * Up to 252 Dynamixel servos
 * Up to 10 hobby (PWM) servos
 * 8 analog channels
 * Up to 16 digital channels (multiplexed with the hobby servo channels)
 * Full, tunable PID control of 2 motors.
 * IK-based control of walking robots (this requires a special NUKE-based firmware).

The firmware consists of several files, which must be placed in the _arduino-sketchbook/ros_ folder: 

Support for NUKE walkers is provided by replacing the default exported sketch with the _ros-nuke.pde_ file (editing where noted), and copying _ros.h_ and _pml.h_ into the sketch folder. 

Servos also have the following parameters: 
 * id - must be specified for each servo. For dynamixel servos, this is the ID on the bus, for hobby servos it is the pin number to use. 
 * neutral (default: 512 or 1500us) - in ticks (dynamixel) or microseconds (hobby servos). 
 * min_angle - minimum angle in degrees.
 * max_angle - maximum angle in degrees.
 * invert (default: 0) - to invert servo rotation or not.
 * sync (default: True for dynamixels, false for hobby) - whether servo should be queried for position when doing joint_state update. If false, last known position is used for joint_state publications. 
 * range - range of servo in degrees, must be set before ticks if used.
 * ticks (default: 1024 or 2000us) - number of ticks, for EX-106s, you would have to pass in 4096, other servos likely won't change this. 

== Other Controllers==
Planned controllers include:
 * Action based joint controllers, for arms (arbotix_controllers/joint_traj_action).
 * Action based single joint controller (arbotix_controllers/single_traj_action).
 * Action based head controller (arbotix_controllers/head_action).
 * Low level joint trajectory controllers (arbotix_controllers/joint_traj_controller).

A joint_traj_controller allows more advanced control of a set of servos by passing a series of trajectories, rather than a single position. It subscribes to the _command_ topic within it's namespace. The single_traj_controller is a similar controller, but for single servo control. A joint_traj_action can be used to pass trajectories to a joint_traj_controller via an action interface.