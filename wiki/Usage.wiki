#summary how to use 0.4.0

= Nodes and Packages =
Several nodes and packages have been renamed:
 * The original ''arbotix'' package is now ''arbotix_python''. The ''arbotix-node.py'' executable is now ''driver.py'' within the new package. 
 * The original joint controller has been moved into the ''arbotix_controllers'' package, as a standalone executable called ''joint_controller.py''. It takes a single parameter -- a list of ''joints'', which it converts from a cmd_joints topic into individual JointTrajectoryPoint messages. 

= Rates =
The new ''driver.py'' has a single main loop, which mitigates issues caused to race conditions. The single main loop will run at a frequency determined by the ''rate'' parameter (default: 100). Each main module then has a frequency it runs at, determined by its ''rate'' parameter:
 * ~rate - the rate to run the loop at (default: 100)
 * ~read_rate - dynamixel read rate throttle (default: 10)
 * ~write_rate - dynamixel sync_write rate throttle (default: 10)
 * ~base/rate - (default: 10)
 * ~pml/rate - (default: 5)

= Digital and Analog =
The old get/set digital and analog services are now gone, in their place is a new topic streaming system. This system is much faster than the old services-based one, but requires some setup:
 * Terminology: we have both analog and digital ''sensors'' -- that is, inputs. There are also digital ''servos'' or outputs. 
 * To start a digital sensor, analog sensor, or digital servo, we must define the topic name to publish/subscribe to, and the pin used: 
 {{{
 digital_sensors: {topic_name: {pin: 1}, more_topic_name: {pin: 2}}
 analog_sensors: {topic_name: {pin: 1}, another_topic_name: {pin: 2}}
 digital_servos: {topic_name: {pin: 3}, another_topic_name: {pin: 4}}
 }}}
 Pin numbers correspond to arduino analog/digital pins. Each sensor/servo can also take a throttle parameter, the default is 10.  Additionally, we provide a service to setup new IO channels (SetupChannel.srv):
 {{{
 # message to setup an IO channel
 string topic_name
 uint8 pin
 uint8 rate
 }}}

= Base Controller =
There is no longer a ''controllers'' collection. Most have moved to become new standalone nodes, however the base_controller is fully integrated into the main package. Configuration and parameters are similar to before, but no longer inside a ''controllers'' dictionary. To configure it: 
{{{
base: {base_width: 0.36195, ticks_meter: 66348, Kp: 2, Kd: 0, Ki: 0, Ko: 100}
}}}
A parameter of importance is ''throttle'' which will decide the rate at which updates occur. See discussion above. 